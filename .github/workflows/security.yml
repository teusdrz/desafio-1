name: Security Audit

on:
  schedule:
    - cron: '0 2 * * 1' # Run every Monday at 2 AM
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  audit-backend:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Restore dependencies
      run: dotnet restore
      working-directory: ./backend

    - name: List packages
      run: dotnet list package --vulnerable --include-transitive
      working-directory: ./backend

    - name: Check for vulnerable packages
      run: |
        # Check if there are any vulnerable packages
        vulnerable_packages=$(dotnet list package --vulnerable --include-transitive 2>&1 | grep -c "has the following vulnerable packages" || echo "0")
        if [ "$vulnerable_packages" -gt 0 ]; then
          echo "::error::Vulnerable packages found in backend"
          dotnet list package --vulnerable --include-transitive
          exit 1
        else
          echo "No vulnerable packages found in backend"
        fi
      working-directory: ./backend

  audit-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: npm ci
      working-directory: ./frontend

    - name: Run npm audit
      run: |
        # Run npm audit and capture the exit code
        if ! npm audit --audit-level=high; then
          echo "::error::High severity vulnerabilities found in frontend dependencies"
          npm audit --audit-level=high
          exit 1
        else
          echo "No high severity vulnerabilities found in frontend dependencies"
        fi
      working-directory: ./frontend

  codeql:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      matrix:
        language: [ 'csharp', 'javascript' ]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}

    - name: Setup .NET (for C#)
      if: matrix.language == 'csharp'
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Build backend (for C#)
      if: matrix.language == 'csharp'
      run: |
        dotnet restore
        dotnet build --no-restore
      working-directory: ./backend

    - name: Setup Node.js (for JavaScript)
      if: matrix.language == 'javascript'
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Build frontend (for JavaScript)
      if: matrix.language == 'javascript'
      run: |
        npm ci
        npm run build
      working-directory: ./frontend

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"
